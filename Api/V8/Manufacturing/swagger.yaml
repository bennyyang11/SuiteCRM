openapi: 3.0.3
info:
  title: SuiteCRM Manufacturing API
  description: Modern manufacturing CRM API for sales representatives and distributors
  version: 8.0.0
  contact:
    name: SuiteCRM Manufacturing Support
    email: support@suitecrm.com
  license:
    name: AGPL v3
    url: https://www.gnu.org/licenses/agpl-3.0.html

servers:
  - url: /api/v8/manufacturing
    description: Manufacturing API v8

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    
  schemas:
    Product:
      type: object
      required: [id, name, sku, category, basePrice]
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          maxLength: 255
          example: "Industrial Bearing Set"
        sku:
          type: string
          maxLength: 100
          example: "IBS-2024-001"
        category:
          type: string
          maxLength: 100
          example: "Industrial Components"
        description:
          type: string
          example: "High-quality industrial bearing set for manufacturing equipment"
        basePrice:
          type: number
          format: float
          minimum: 0
          example: 299.99
        clientPrice:
          type: number
          format: float
          minimum: 0
          example: 249.99
        stockLevel:
          type: integer
          minimum: 0
          example: 150
        stockStatus:
          type: string
          enum: [in-stock, low-stock, out-of-stock]
          example: "in-stock"
        image:
          type: string
          format: uri
          example: "/uploads/products/ibs-2024-001.jpg"
        specifications:
          type: object
          additionalProperties: true
          example:
            material: "Steel"
            weight: "2.5kg"
            dimensions: "10x5x3cm"
        alternatives:
          type: array
          items:
            type: string
          example: ["IBS-2024-002", "IBS-2024-003"]
        warehouseLocation:
          type: string
          example: "A-12-B"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    Order:
      type: object
      required: [id, clientId, clientName, status, items, totalAmount]
      properties:
        id:
          type: string
          format: uuid
        clientId:
          type: string
          format: uuid
        clientName:
          type: string
          example: "Acme Manufacturing"
        status:
          type: string
          enum: [quote, pending, confirmed, production, shipped, delivered, cancelled]
          example: "confirmed"
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        totalAmount:
          type: number
          format: float
          minimum: 0
          example: 1299.99
        currency:
          type: string
          enum: [USD, EUR, GBP]
          example: "USD"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        estimatedDelivery:
          type: string
          format: date-time
        notes:
          type: string
          maxLength: 1000

    OrderItem:
      type: object
      required: [productId, productName, quantity, unitPrice, totalPrice]
      properties:
        productId:
          type: string
          format: uuid
        productName:
          type: string
        quantity:
          type: integer
          minimum: 1
          example: 5
        unitPrice:
          type: number
          format: float
          minimum: 0
          example: 249.99
        totalPrice:
          type: number
          format: float
          minimum: 0
          example: 1249.95

    Quote:
      type: object
      required: [id, clientId, clientName, status, items, totalAmount, validUntil]
      properties:
        id:
          type: string
          format: uuid
        clientId:
          type: string
          format: uuid
        clientName:
          type: string
        status:
          type: string
          enum: [draft, sent, accepted, rejected, expired]
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        totalAmount:
          type: number
          format: float
          minimum: 0
        validUntil:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        notes:
          type: string
          maxLength: 1000
        pdfUrl:
          type: string
          format: uri

    Error:
      type: object
      required: [error, message]
      properties:
        error:
          type: string
          example: "ValidationError"
        message:
          type: string
          example: "Invalid input data"
        details:
          type: object
          additionalProperties: true
        code:
          type: integer
          example: 400
        timestamp:
          type: string
          format: date-time

security:
  - bearerAuth: []

paths:
  /products:
    get:
      summary: Get products with filtering
      parameters:
        - name: category
          in: query
          schema:
            type: string
        - name: minPrice
          in: query
          schema:
            type: number
        - name: maxPrice
          in: query
          schema:
            type: number
        - name: stockStatus
          in: query
          schema:
            type: string
            enum: [in-stock, low-stock, out-of-stock]
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      limit:
                        type: integer
                      offset:
                        type: integer
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/{id}:
    get:
      summary: Get product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/search:
    get:
      summary: Search products
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query
        - name: category
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  meta:
                    type: object
                    properties:
                      query:
                        type: string
                      total:
                        type: integer

  /products/{id}/suggestions:
    get:
      summary: Get product suggestions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Alternative products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /orders:
    get:
      summary: Get orders
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [quote, pending, confirmed, production, shipped, delivered, cancelled]
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    
    post:
      summary: Create new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [clientId, items]
              properties:
                clientId:
                  type: string
                  format: uuid
                items:
                  type: array
                  items:
                    type: object
                    required: [productId, quantity]
                    properties:
                      productId:
                        type: string
                        format: uuid
                      quantity:
                        type: integer
                        minimum: 1
                notes:
                  type: string
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/{id}:
    get:
      summary: Get order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

  /orders/{id}/status:
    patch:
      summary: Update order status
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [quote, pending, confirmed, production, shipped, delivered, cancelled]
      responses:
        '200':
          description: Order status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /quotes:
    get:
      summary: Get quotes
      parameters:
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, sent, accepted, rejected, expired]
      responses:
        '200':
          description: List of quotes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quote'
    
    post:
      summary: Create new quote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [clientId, items, validUntil]
              properties:
                clientId:
                  type: string
                  format: uuid
                items:
                  type: array
                  items:
                    type: object
                    required: [productId, quantity]
                    properties:
                      productId:
                        type: string
                        format: uuid
                      quantity:
                        type: integer
                        minimum: 1
                validUntil:
                  type: string
                  format: date-time
                notes:
                  type: string
      responses:
        '201':
          description: Quote created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

  /quotes/{id}/pdf:
    post:
      summary: Generate quote PDF
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: PDF generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  pdfUrl:
                    type: string
                    format: uri

  /quotes/{id}/accept:
    post:
      summary: Accept quote and convert to order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Quote accepted, order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /inventory/status:
    get:
      summary: Get inventory status for all products
      responses:
        '200':
          description: Inventory status
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                example:
                  "550e8400-e29b-41d4-a716-446655440000": 150
                  "550e8400-e29b-41d4-a716-446655440001": 25

  /inventory/{productId}:
    patch:
      summary: Update inventory for a product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [quantity]
              properties:
                quantity:
                  type: integer
                  minimum: 0
      responses:
        '200':
          description: Inventory updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  productId:
                    type: string
                  newQuantity:
                    type: integer

  /pricing/client/{clientId}:
    get:
      summary: Get client-specific pricing
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Client pricing information
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: number
                example:
                  "550e8400-e29b-41d4-a716-446655440000": 249.99
                  "550e8400-e29b-41d4-a716-446655440001": 199.99

  /analytics/sales:
    get:
      summary: Get sales analytics
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [day, week, month, quarter, year]
            default: month
      responses:
        '200':
          description: Sales metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  period:
                    type: string
                  totalSales:
                    type: number
                  orderCount:
                    type: integer
                  averageOrderValue:
                    type: number
                  topProducts:
                    type: array
                    items:
                      type: object
                      properties:
                        productId:
                          type: string
                        productName:
                          type: string
                        salesCount:
                          type: integer

  /analytics/performance:
    get:
      summary: Get system performance metrics
      responses:
        '200':
          description: Performance metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiResponseTime:
                    type: number
                  databaseQueryTime:
                    type: number
                  cacheHitRate:
                    type: number
                  activeUsers:
                    type: integer
